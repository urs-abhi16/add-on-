CHARACTER:

import java.util.*;
class Main {
    public static void main(String[] args) {
       Scanner s=new Scanner(System.in);
       System.out.println("Enter the char:");
       char ch=s.nextLine().charAt(0);
       System.out.println(ch);
       
        
    }
}

OUTPUT:
Enter the char:
abh
a

OOPS CONCEPT:
CLASS:
blueprint of java
contains states and behavior
state-data member(variable)
behavior-member function

OBJECT:
real world entity-have its own states and behavior

Java can have 2 classes-for logic and execution part

static int a=10;
if static - don't want to use objects instead of use classname.static member

class Main {
    public static void main(String[] args) {
       //non-static
       Objectoriented ref=new Objectoriented();
       System.out.println(ref.name);
       System.out.println(ref.Rollno);
       //static
       System.out.println(Objectoriented.a);
       Objectoriented.Display();
    }
}
class Objectoriented{
    //non-static
    String name="Nikash";
    String Rollno="2326jb25";
    
    static int a=10;
    public static void Display(){
    }
}

OUTPUT:
Nikash
2326jb25
10 

CONSTRUCTORS:
1)Special method or member function must have
same name as that of class name
2)It does not allows access modifiers and also return type

class Cons{
    public static void main(String[] args){
        Sample ref=new Sample();
    }
}
class Sample{
    //default constructor
    Sample(){
        System.out.println("Default Constructor");
    }
}

OUTPUT:
Default Constructor

class Cons{
    public static void main(String[] args){
        Sample ref=new Sample("BMW"," M7");
        Sample ref1=new Sample("Audi"," Q3");
        Sample ref2=new Sample("Ford"," Mustang");
        System.out.print(ref.carname);
        System.out.println(ref.carmodel);
        System.out.print(ref1.carname);
        System.out.println(ref1.carmodel);
        System.out.print(ref2.carname);
        System.out.print(ref2.carmodel);
    }
}
class Sample{
    String carname;
    String carmodel;

    //default constructor
    Sample(String carname,String carmodel){
        this.carname=carname;
        this.carmodel=carmodel;
        System.out.println("Default Constructor");
    }
}

OUTPUT:

Default Constructor
Default Constructor
Default Constructor
BMW M7
Audi Q3
Ford Mustang

ENCAPSULATION:

class Cons{
    public static void main(String[] args){
      Account ac=new Account("Nikash",3000);
        System.out.println(ac.getAccholder());
        System.out.println(ac.getBalance());
    }
}
class Account{
    private String Accholder;
    private int Balance;

    //default constructor
    Account(String Accholder,int Balance){
       this.Accholder=Accholder;
       this.Balance=Balance;
    }
    public String getAccholder(){
        return Accholder;
    }
    public int getBalance(){
        return Balance;
    }
}

OUTPUT:
Nikash
3000

//updation
class Cons{
    public static void main(String[] args){
      Account ac=new Account("Nikash",3000);
        System.out.println(ac.getAccholder());
        System.out.println(ac.getBalance());
        ac.setAccholder("Abhinav");
        System.out.println(ac.getAccholder());
    }
}
class Account{
    private String Accholder;
    private int Balance;

    //default constructor
    Account(String Accholder,int Balance){
       this.Accholder=Accholder;
       this.Balance=Balance;
    }
    public String getAccholder(){
        return Accholder;
    }
    public int getBalance(){
        return Balance;
    }
    public void setAccholder(String Accholder){
        this.Accholder=Accholder;
    }
}

OUTPUT:
Nikash
3000
Abhinav

with balance and withdraw:
class Cons{
    public static void main(String[] args){
      Account ac=new Account("Nikash",3000);
        System.out.println("THE ACCOUNT HOLDER NAME:"+ac.getAccholder());
        System.out.println("THE BALANCE IS:"+ac.getBalance());
        ac.setAccholder("Abhinav");
        ac.setBalance(3000);
        ac.setwithdraw(1000);
        System.out.println("CURRENT BALANCE IS:"+ac.getBalance());
    }
}
class Account{
    private String Accholder;
    private int Balance;
    private int withdraw;

    //default constructor
    Account(String Accholder,int Balance){
       this.Accholder=Accholder;
       this.Balance=Balance;
    }
    public String getAccholder(){
        return Accholder;
    }
    public int getBalance(){
        return Balance;
    }
    public int getwithdraw(){
        return withdraw;
    }
    
    public void setAccholder(String Accholder){
        this.Accholder=Accholder;
        System.out.println( "UPDATED Name:"+Accholder);
    }
    public void setBalance(int Amount){
        if(Balance>0){
            Balance+=Amount;
            System.out.println( "THE CREDITED AMOUNT IS:"+Amount);
            System.out.println( "THE BALANCE AMOUNT IS:"+Balance);
        }
        else{
           System.out.println("no balance");
        }
       
    }
    public void setwithdraw(int withdraw){
        Balance-=withdraw;
        System.out.println("THE WITHDRAW AMOUNT is:"+withdraw);

}
}
output:
THE ACCOUNT HOLDER NAME:Nikash
THE BALANCE IS:3000
UPDATED Name:Abhinav
THE CREDITED AMOUNT IS:3000
THE BALANCE AMOUNT IS:6000
THE WITHDRAW AMOUNT is:1000
CURRENT BALANCE IS:5000


